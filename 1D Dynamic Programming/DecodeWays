class Solution(object):
	def numDecodings(self, s):
		if s[0] == '0':
			return 0
		prev = s[0]
		count = 1
		increment = False
		for i in range(1,len(s)):
			val = int(prev + s[i])
			if (val >= 1 and val <= 26) and prev != '0':
				if s[i] == "0":
					if increment == True:
						count -=1
						increment = False
				else:
					count += 1
					increment = True
			elif s[i] == '0':
				print(0)
				return 0
			prev = s[i]
		print(count)
		return count



#Test Cases 

object = Solution()

#Trailing zero cannot be represented
#object.numDecodings("100")

#represented in 2 ways
#object.numDecodings("11101")

#leading zero cannot be represented
#object.numDecodings("0111")

#only represented in one way because too large
#object.numDecodings("666")

#mix of double counts and zero's
#object.numDecodings("12261023")

#double count
object.numDecodings("112")


#object.numDecodings("100")